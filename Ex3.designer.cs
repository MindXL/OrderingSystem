#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ex3
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Ex3")]
	public partial class Ex3DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void InsertEntryRecord(EntryRecord instance);
    partial void UpdateEntryRecord(EntryRecord instance);
    partial void DeleteEntryRecord(EntryRecord instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertManSupCoop(ManSupCoop instance);
    partial void UpdateManSupCoop(ManSupCoop instance);
    partial void DeleteManSupCoop(ManSupCoop instance);
    partial void InsertManufacturer(Manufacturer instance);
    partial void UpdateManufacturer(Manufacturer instance);
    partial void DeleteManufacturer(Manufacturer instance);
    partial void InsertMaterial(Material instance);
    partial void UpdateMaterial(Material instance);
    partial void DeleteMaterial(Material instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    partial void InsertSupplier(Supplier instance);
    partial void UpdateSupplier(Supplier instance);
    partial void DeleteSupplier(Supplier instance);
    partial void InsertUnfinishedRecord(UnfinishedRecord instance);
    partial void UpdateUnfinishedRecord(UnfinishedRecord instance);
    partial void DeleteUnfinishedRecord(UnfinishedRecord instance);
    #endregion
		
		public Ex3DataContext() : 
				base(global::Ex3.Properties.Settings.Default.Ex3ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public Ex3DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Ex3DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Ex3DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Ex3DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<EntryRecord> EntryRecord
		{
			get
			{
				return this.GetTable<EntryRecord>();
			}
		}
		
		public System.Data.Linq.Table<User> User
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<ManSupCoop> ManSupCoop
		{
			get
			{
				return this.GetTable<ManSupCoop>();
			}
		}
		
		public System.Data.Linq.Table<Manufacturer> Manufacturer
		{
			get
			{
				return this.GetTable<Manufacturer>();
			}
		}
		
		public System.Data.Linq.Table<Material> Material
		{
			get
			{
				return this.GetTable<Material>();
			}
		}
		
		public System.Data.Linq.Table<Order> Order
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
		
		public System.Data.Linq.Table<Supplier> Supplier
		{
			get
			{
				return this.GetTable<Supplier>();
			}
		}
		
		public System.Data.Linq.Table<UnfinishedRecord> UnfinishedRecord
		{
			get
			{
				return this.GetTable<UnfinishedRecord>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EntryRecord")]
	public partial class EntryRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _orderId;
		
		private int _matId;
		
		private int _supId;
		
		private int _amount;
		
		private decimal _price;
		
		private decimal _finalPrice;
		
		private System.DateTime _entryDate;
		
		private EntityRef<Material> _Material;
		
		private EntityRef<Order> _Order;
		
		private EntityRef<Supplier> _Supplier;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnorderIdChanging(string value);
    partial void OnorderIdChanged();
    partial void OnmatIdChanging(int value);
    partial void OnmatIdChanged();
    partial void OnsupIdChanging(int value);
    partial void OnsupIdChanged();
    partial void OnamountChanging(int value);
    partial void OnamountChanged();
    partial void OnpriceChanging(decimal value);
    partial void OnpriceChanged();
    partial void OnfinalPriceChanging(decimal value);
    partial void OnfinalPriceChanged();
    partial void OnentryDateChanging(System.DateTime value);
    partial void OnentryDateChanged();
    #endregion
		
		public EntryRecord()
		{
			this._Material = default(EntityRef<Material>);
			this._Order = default(EntityRef<Order>);
			this._Supplier = default(EntityRef<Supplier>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orderId", DbType="VarChar(16) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string orderId
		{
			get
			{
				return this._orderId;
			}
			set
			{
				if ((this._orderId != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnorderIdChanging(value);
					this.SendPropertyChanging();
					this._orderId = value;
					this.SendPropertyChanged("orderId");
					this.OnorderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_matId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int matId
		{
			get
			{
				return this._matId;
			}
			set
			{
				if ((this._matId != value))
				{
					if (this._Material.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmatIdChanging(value);
					this.SendPropertyChanging();
					this._matId = value;
					this.SendPropertyChanged("matId");
					this.OnmatIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_supId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int supId
		{
			get
			{
				return this._supId;
			}
			set
			{
				if ((this._supId != value))
				{
					if (this._Supplier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsupIdChanging(value);
					this.SendPropertyChanging();
					this._supId = value;
					this.SendPropertyChanged("supId");
					this.OnsupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="Int NOT NULL")]
		public int amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this.OnamountChanging(value);
					this.SendPropertyChanging();
					this._amount = value;
					this.SendPropertyChanged("amount");
					this.OnamountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Decimal(11,2) NOT NULL")]
		public decimal price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_finalPrice", DbType="Decimal(11,2) NOT NULL")]
		public decimal finalPrice
		{
			get
			{
				return this._finalPrice;
			}
			set
			{
				if ((this._finalPrice != value))
				{
					this.OnfinalPriceChanging(value);
					this.SendPropertyChanging();
					this._finalPrice = value;
					this.SendPropertyChanged("finalPrice");
					this.OnfinalPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_entryDate", DbType="DateTime NOT NULL")]
		public System.DateTime entryDate
		{
			get
			{
				return this._entryDate;
			}
			set
			{
				if ((this._entryDate != value))
				{
					this.OnentryDateChanging(value);
					this.SendPropertyChanging();
					this._entryDate = value;
					this.SendPropertyChanged("entryDate");
					this.OnentryDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Material_EntryRecord", Storage="_Material", ThisKey="matId", OtherKey="id", IsForeignKey=true)]
		public Material Material
		{
			get
			{
				return this._Material.Entity;
			}
			set
			{
				Material previousValue = this._Material.Entity;
				if (((previousValue != value) 
							|| (this._Material.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Material.Entity = null;
						previousValue.EntryRecord.Remove(this);
					}
					this._Material.Entity = value;
					if ((value != null))
					{
						value.EntryRecord.Add(this);
						this._matId = value.id;
					}
					else
					{
						this._matId = default(int);
					}
					this.SendPropertyChanged("Material");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_EntryRecord", Storage="_Order", ThisKey="orderId", OtherKey="id", IsForeignKey=true)]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.EntryRecord.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.EntryRecord.Add(this);
						this._orderId = value.id;
					}
					else
					{
						this._orderId = default(string);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplier_EntryRecord", Storage="_Supplier", ThisKey="supId", OtherKey="id", IsForeignKey=true)]
		public Supplier Supplier
		{
			get
			{
				return this._Supplier.Entity;
			}
			set
			{
				Supplier previousValue = this._Supplier.Entity;
				if (((previousValue != value) 
							|| (this._Supplier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Supplier.Entity = null;
						previousValue.EntryRecord.Remove(this);
					}
					this._Supplier.Entity = value;
					if ((value != null))
					{
						value.EntryRecord.Add(this);
						this._supId = value.id;
					}
					else
					{
						this._supId = default(int);
					}
					this.SendPropertyChanged("Supplier");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _account;
		
		private string _password;
		
		private string _name;
		
		private string _phone;
		
		private string _email;
		
		private EntitySet<Order> _Order;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnaccountChanging(string value);
    partial void OnaccountChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnphoneChanging(string value);
    partial void OnphoneChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    #endregion
		
		public User()
		{
			this._Order = new EntitySet<Order>(new Action<Order>(this.attach_Order), new Action<Order>(this.detach_Order));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_account", DbType="VarChar(16)")]
		public string account
		{
			get
			{
				return this._account;
			}
			set
			{
				if ((this._account != value))
				{
					this.OnaccountChanging(value);
					this.SendPropertyChanging();
					this._account = value;
					this.SendPropertyChanged("account");
					this.OnaccountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phone", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string phone
		{
			get
			{
				return this._phone;
			}
			set
			{
				if ((this._phone != value))
				{
					this.OnphoneChanging(value);
					this.SendPropertyChanging();
					this._phone = value;
					this.SendPropertyChanged("phone");
					this.OnphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Order", Storage="_Order", ThisKey="id", OtherKey="principalId")]
		public EntitySet<Order> Order
		{
			get
			{
				return this._Order;
			}
			set
			{
				this._Order.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Order(Order entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Order(Order entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ManSupCoop")]
	public partial class ManSupCoop : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _manId;
		
		private int _supId;
		
		private EntityRef<Manufacturer> _Manufacturer;
		
		private EntityRef<Supplier> _Supplier;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmanIdChanging(int value);
    partial void OnmanIdChanged();
    partial void OnsupIdChanging(int value);
    partial void OnsupIdChanged();
    #endregion
		
		public ManSupCoop()
		{
			this._Manufacturer = default(EntityRef<Manufacturer>);
			this._Supplier = default(EntityRef<Supplier>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_manId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int manId
		{
			get
			{
				return this._manId;
			}
			set
			{
				if ((this._manId != value))
				{
					if (this._Manufacturer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmanIdChanging(value);
					this.SendPropertyChanging();
					this._manId = value;
					this.SendPropertyChanged("manId");
					this.OnmanIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_supId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int supId
		{
			get
			{
				return this._supId;
			}
			set
			{
				if ((this._supId != value))
				{
					if (this._Supplier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsupIdChanging(value);
					this.SendPropertyChanging();
					this._supId = value;
					this.SendPropertyChanged("supId");
					this.OnsupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Manufacturer_ManSupCoop", Storage="_Manufacturer", ThisKey="manId", OtherKey="id", IsForeignKey=true)]
		public Manufacturer Manufacturer
		{
			get
			{
				return this._Manufacturer.Entity;
			}
			set
			{
				Manufacturer previousValue = this._Manufacturer.Entity;
				if (((previousValue != value) 
							|| (this._Manufacturer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Manufacturer.Entity = null;
						previousValue.ManSupCoop.Remove(this);
					}
					this._Manufacturer.Entity = value;
					if ((value != null))
					{
						value.ManSupCoop.Add(this);
						this._manId = value.id;
					}
					else
					{
						this._manId = default(int);
					}
					this.SendPropertyChanged("Manufacturer");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplier_ManSupCoop", Storage="_Supplier", ThisKey="supId", OtherKey="id", IsForeignKey=true)]
		public Supplier Supplier
		{
			get
			{
				return this._Supplier.Entity;
			}
			set
			{
				Supplier previousValue = this._Supplier.Entity;
				if (((previousValue != value) 
							|| (this._Supplier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Supplier.Entity = null;
						previousValue.ManSupCoop.Remove(this);
					}
					this._Supplier.Entity = value;
					if ((value != null))
					{
						value.ManSupCoop.Add(this);
						this._supId = value.id;
					}
					else
					{
						this._supId = default(int);
					}
					this.SendPropertyChanged("Supplier");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Manufacturer")]
	public partial class Manufacturer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private EntitySet<ManSupCoop> _ManSupCoop;
		
		private EntitySet<Material> _Material;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public Manufacturer()
		{
			this._ManSupCoop = new EntitySet<ManSupCoop>(new Action<ManSupCoop>(this.attach_ManSupCoop), new Action<ManSupCoop>(this.detach_ManSupCoop));
			this._Material = new EntitySet<Material>(new Action<Material>(this.attach_Material), new Action<Material>(this.detach_Material));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(40) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Manufacturer_ManSupCoop", Storage="_ManSupCoop", ThisKey="id", OtherKey="manId")]
		public EntitySet<ManSupCoop> ManSupCoop
		{
			get
			{
				return this._ManSupCoop;
			}
			set
			{
				this._ManSupCoop.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Manufacturer_Material", Storage="_Material", ThisKey="id", OtherKey="manId")]
		public EntitySet<Material> Material
		{
			get
			{
				return this._Material;
			}
			set
			{
				this._Material.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ManSupCoop(ManSupCoop entity)
		{
			this.SendPropertyChanging();
			entity.Manufacturer = this;
		}
		
		private void detach_ManSupCoop(ManSupCoop entity)
		{
			this.SendPropertyChanging();
			entity.Manufacturer = null;
		}
		
		private void attach_Material(Material entity)
		{
			this.SendPropertyChanging();
			entity.Manufacturer = this;
		}
		
		private void detach_Material(Material entity)
		{
			this.SendPropertyChanging();
			entity.Manufacturer = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Material")]
	public partial class Material : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _manId;
		
		private string _model;
		
		private string _name;
		
		private int _amount;
		
		private int _warningAmount;
		
		private EntitySet<EntryRecord> _EntryRecord;
		
		private EntitySet<UnfinishedRecord> _UnfinishedRecord;
		
		private EntityRef<Manufacturer> _Manufacturer;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnmanIdChanging(System.Nullable<int> value);
    partial void OnmanIdChanged();
    partial void OnmodelChanging(string value);
    partial void OnmodelChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnamountChanging(int value);
    partial void OnamountChanged();
    partial void OnwarningAmountChanging(int value);
    partial void OnwarningAmountChanged();
    #endregion
		
		public Material()
		{
			this._EntryRecord = new EntitySet<EntryRecord>(new Action<EntryRecord>(this.attach_EntryRecord), new Action<EntryRecord>(this.detach_EntryRecord));
			this._UnfinishedRecord = new EntitySet<UnfinishedRecord>(new Action<UnfinishedRecord>(this.attach_UnfinishedRecord), new Action<UnfinishedRecord>(this.detach_UnfinishedRecord));
			this._Manufacturer = default(EntityRef<Manufacturer>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_manId", DbType="Int")]
		public System.Nullable<int> manId
		{
			get
			{
				return this._manId;
			}
			set
			{
				if ((this._manId != value))
				{
					if (this._Manufacturer.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmanIdChanging(value);
					this.SendPropertyChanging();
					this._manId = value;
					this.SendPropertyChanged("manId");
					this.OnmanIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_model", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string model
		{
			get
			{
				return this._model;
			}
			set
			{
				if ((this._model != value))
				{
					this.OnmodelChanging(value);
					this.SendPropertyChanging();
					this._model = value;
					this.SendPropertyChanged("model");
					this.OnmodelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="Int NOT NULL")]
		public int amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this.OnamountChanging(value);
					this.SendPropertyChanging();
					this._amount = value;
					this.SendPropertyChanged("amount");
					this.OnamountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_warningAmount", DbType="Int NOT NULL")]
		public int warningAmount
		{
			get
			{
				return this._warningAmount;
			}
			set
			{
				if ((this._warningAmount != value))
				{
					this.OnwarningAmountChanging(value);
					this.SendPropertyChanging();
					this._warningAmount = value;
					this.SendPropertyChanged("warningAmount");
					this.OnwarningAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Material_EntryRecord", Storage="_EntryRecord", ThisKey="id", OtherKey="matId")]
		public EntitySet<EntryRecord> EntryRecord
		{
			get
			{
				return this._EntryRecord;
			}
			set
			{
				this._EntryRecord.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Material_UnfinishedRecord", Storage="_UnfinishedRecord", ThisKey="id", OtherKey="matId")]
		public EntitySet<UnfinishedRecord> UnfinishedRecord
		{
			get
			{
				return this._UnfinishedRecord;
			}
			set
			{
				this._UnfinishedRecord.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Manufacturer_Material", Storage="_Manufacturer", ThisKey="manId", OtherKey="id", IsForeignKey=true)]
		public Manufacturer Manufacturer
		{
			get
			{
				return this._Manufacturer.Entity;
			}
			set
			{
				Manufacturer previousValue = this._Manufacturer.Entity;
				if (((previousValue != value) 
							|| (this._Manufacturer.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Manufacturer.Entity = null;
						previousValue.Material.Remove(this);
					}
					this._Manufacturer.Entity = value;
					if ((value != null))
					{
						value.Material.Add(this);
						this._manId = value.id;
					}
					else
					{
						this._manId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Manufacturer");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EntryRecord(EntryRecord entity)
		{
			this.SendPropertyChanging();
			entity.Material = this;
		}
		
		private void detach_EntryRecord(EntryRecord entity)
		{
			this.SendPropertyChanging();
			entity.Material = null;
		}
		
		private void attach_UnfinishedRecord(UnfinishedRecord entity)
		{
			this.SendPropertyChanging();
			entity.Material = this;
		}
		
		private void detach_UnfinishedRecord(UnfinishedRecord entity)
		{
			this.SendPropertyChanging();
			entity.Material = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Order]")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _id;
		
		private byte _state;
		
		private string _description;
		
		private System.Nullable<int> _principalId;
		
		private decimal _totalPrice;
		
		private decimal _finalPrice;
		
		private System.DateTime _genDate;
		
		private System.Nullable<System.DateTime> _approveDate;
		
		private System.Nullable<System.DateTime> _finishDate;
		
		private EntitySet<EntryRecord> _EntryRecord;
		
		private EntitySet<UnfinishedRecord> _UnfinishedRecord;
		
		private EntityRef<User> _User;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(string value);
    partial void OnidChanged();
    partial void OnstateChanging(byte value);
    partial void OnstateChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnprincipalIdChanging(System.Nullable<int> value);
    partial void OnprincipalIdChanged();
    partial void OntotalPriceChanging(decimal value);
    partial void OntotalPriceChanged();
    partial void OnfinalPriceChanging(decimal value);
    partial void OnfinalPriceChanged();
    partial void OngenDateChanging(System.DateTime value);
    partial void OngenDateChanged();
    partial void OnapproveDateChanging(System.Nullable<System.DateTime> value);
    partial void OnapproveDateChanged();
    partial void OnfinishDateChanging(System.Nullable<System.DateTime> value);
    partial void OnfinishDateChanged();
    #endregion
		
		public Order()
		{
			this._EntryRecord = new EntitySet<EntryRecord>(new Action<EntryRecord>(this.attach_EntryRecord), new Action<EntryRecord>(this.detach_EntryRecord));
			this._UnfinishedRecord = new EntitySet<UnfinishedRecord>(new Action<UnfinishedRecord>(this.attach_UnfinishedRecord), new Action<UnfinishedRecord>(this.detach_UnfinishedRecord));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="VarChar(16) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_state", DbType="TinyInt NOT NULL")]
		public byte state
		{
			get
			{
				return this._state;
			}
			set
			{
				if ((this._state != value))
				{
					this.OnstateChanging(value);
					this.SendPropertyChanging();
					this._state = value;
					this.SendPropertyChanged("state");
					this.OnstateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="NVarChar(200)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_principalId", DbType="Int")]
		public System.Nullable<int> principalId
		{
			get
			{
				return this._principalId;
			}
			set
			{
				if ((this._principalId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnprincipalIdChanging(value);
					this.SendPropertyChanging();
					this._principalId = value;
					this.SendPropertyChanged("principalId");
					this.OnprincipalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_totalPrice", DbType="Decimal(11,2) NOT NULL")]
		public decimal totalPrice
		{
			get
			{
				return this._totalPrice;
			}
			set
			{
				if ((this._totalPrice != value))
				{
					this.OntotalPriceChanging(value);
					this.SendPropertyChanging();
					this._totalPrice = value;
					this.SendPropertyChanged("totalPrice");
					this.OntotalPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_finalPrice", DbType="Decimal(11,2) NOT NULL")]
		public decimal finalPrice
		{
			get
			{
				return this._finalPrice;
			}
			set
			{
				if ((this._finalPrice != value))
				{
					this.OnfinalPriceChanging(value);
					this.SendPropertyChanging();
					this._finalPrice = value;
					this.SendPropertyChanged("finalPrice");
					this.OnfinalPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_genDate", DbType="DateTime NOT NULL")]
		public System.DateTime genDate
		{
			get
			{
				return this._genDate;
			}
			set
			{
				if ((this._genDate != value))
				{
					this.OngenDateChanging(value);
					this.SendPropertyChanging();
					this._genDate = value;
					this.SendPropertyChanged("genDate");
					this.OngenDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_approveDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> approveDate
		{
			get
			{
				return this._approveDate;
			}
			set
			{
				if ((this._approveDate != value))
				{
					this.OnapproveDateChanging(value);
					this.SendPropertyChanging();
					this._approveDate = value;
					this.SendPropertyChanged("approveDate");
					this.OnapproveDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_finishDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> finishDate
		{
			get
			{
				return this._finishDate;
			}
			set
			{
				if ((this._finishDate != value))
				{
					this.OnfinishDateChanging(value);
					this.SendPropertyChanging();
					this._finishDate = value;
					this.SendPropertyChanged("finishDate");
					this.OnfinishDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_EntryRecord", Storage="_EntryRecord", ThisKey="id", OtherKey="orderId")]
		public EntitySet<EntryRecord> EntryRecord
		{
			get
			{
				return this._EntryRecord;
			}
			set
			{
				this._EntryRecord.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_UnfinishedRecord", Storage="_UnfinishedRecord", ThisKey="id", OtherKey="orderId")]
		public EntitySet<UnfinishedRecord> UnfinishedRecord
		{
			get
			{
				return this._UnfinishedRecord;
			}
			set
			{
				this._UnfinishedRecord.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Order", Storage="_User", ThisKey="principalId", OtherKey="id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Order.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Order.Add(this);
						this._principalId = value.id;
					}
					else
					{
						this._principalId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EntryRecord(EntryRecord entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_EntryRecord(EntryRecord entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
		
		private void attach_UnfinishedRecord(UnfinishedRecord entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_UnfinishedRecord(UnfinishedRecord entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Supplier")]
	public partial class Supplier : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _principalName;
		
		private string _principalPhone;
		
		private string _principalEmail;
		
		private EntitySet<EntryRecord> _EntryRecord;
		
		private EntitySet<ManSupCoop> _ManSupCoop;
		
		private EntitySet<UnfinishedRecord> _UnfinishedRecord;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnprincipalNameChanging(string value);
    partial void OnprincipalNameChanged();
    partial void OnprincipalPhoneChanging(string value);
    partial void OnprincipalPhoneChanged();
    partial void OnprincipalEmailChanging(string value);
    partial void OnprincipalEmailChanged();
    #endregion
		
		public Supplier()
		{
			this._EntryRecord = new EntitySet<EntryRecord>(new Action<EntryRecord>(this.attach_EntryRecord), new Action<EntryRecord>(this.detach_EntryRecord));
			this._ManSupCoop = new EntitySet<ManSupCoop>(new Action<ManSupCoop>(this.attach_ManSupCoop), new Action<ManSupCoop>(this.detach_ManSupCoop));
			this._UnfinishedRecord = new EntitySet<UnfinishedRecord>(new Action<UnfinishedRecord>(this.attach_UnfinishedRecord), new Action<UnfinishedRecord>(this.detach_UnfinishedRecord));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(40) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_principalName", DbType="NVarChar(20) NOT NULL", CanBeNull=false)]
		public string principalName
		{
			get
			{
				return this._principalName;
			}
			set
			{
				if ((this._principalName != value))
				{
					this.OnprincipalNameChanging(value);
					this.SendPropertyChanging();
					this._principalName = value;
					this.SendPropertyChanged("principalName");
					this.OnprincipalNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_principalPhone", DbType="VarChar(15)")]
		public string principalPhone
		{
			get
			{
				return this._principalPhone;
			}
			set
			{
				if ((this._principalPhone != value))
				{
					this.OnprincipalPhoneChanging(value);
					this.SendPropertyChanging();
					this._principalPhone = value;
					this.SendPropertyChanged("principalPhone");
					this.OnprincipalPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_principalEmail", DbType="VarChar(20)")]
		public string principalEmail
		{
			get
			{
				return this._principalEmail;
			}
			set
			{
				if ((this._principalEmail != value))
				{
					this.OnprincipalEmailChanging(value);
					this.SendPropertyChanging();
					this._principalEmail = value;
					this.SendPropertyChanged("principalEmail");
					this.OnprincipalEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplier_EntryRecord", Storage="_EntryRecord", ThisKey="id", OtherKey="supId")]
		public EntitySet<EntryRecord> EntryRecord
		{
			get
			{
				return this._EntryRecord;
			}
			set
			{
				this._EntryRecord.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplier_ManSupCoop", Storage="_ManSupCoop", ThisKey="id", OtherKey="supId")]
		public EntitySet<ManSupCoop> ManSupCoop
		{
			get
			{
				return this._ManSupCoop;
			}
			set
			{
				this._ManSupCoop.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplier_UnfinishedRecord", Storage="_UnfinishedRecord", ThisKey="id", OtherKey="supId")]
		public EntitySet<UnfinishedRecord> UnfinishedRecord
		{
			get
			{
				return this._UnfinishedRecord;
			}
			set
			{
				this._UnfinishedRecord.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EntryRecord(EntryRecord entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = this;
		}
		
		private void detach_EntryRecord(EntryRecord entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = null;
		}
		
		private void attach_ManSupCoop(ManSupCoop entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = this;
		}
		
		private void detach_ManSupCoop(ManSupCoop entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = null;
		}
		
		private void attach_UnfinishedRecord(UnfinishedRecord entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = this;
		}
		
		private void detach_UnfinishedRecord(UnfinishedRecord entity)
		{
			this.SendPropertyChanging();
			entity.Supplier = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UnfinishedRecord")]
	public partial class UnfinishedRecord : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _orderId;
		
		private int _matId;
		
		private int _supId;
		
		private int _amount;
		
		private int _expectAmount;
		
		private EntityRef<Material> _Material;
		
		private EntityRef<Order> _Order;
		
		private EntityRef<Supplier> _Supplier;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnorderIdChanging(string value);
    partial void OnorderIdChanged();
    partial void OnmatIdChanging(int value);
    partial void OnmatIdChanged();
    partial void OnsupIdChanging(int value);
    partial void OnsupIdChanged();
    partial void OnamountChanging(int value);
    partial void OnamountChanged();
    partial void OnexpectAmountChanging(int value);
    partial void OnexpectAmountChanged();
    #endregion
		
		public UnfinishedRecord()
		{
			this._Material = default(EntityRef<Material>);
			this._Order = default(EntityRef<Order>);
			this._Supplier = default(EntityRef<Supplier>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orderId", DbType="VarChar(16) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string orderId
		{
			get
			{
				return this._orderId;
			}
			set
			{
				if ((this._orderId != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnorderIdChanging(value);
					this.SendPropertyChanging();
					this._orderId = value;
					this.SendPropertyChanged("orderId");
					this.OnorderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_matId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int matId
		{
			get
			{
				return this._matId;
			}
			set
			{
				if ((this._matId != value))
				{
					if (this._Material.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnmatIdChanging(value);
					this.SendPropertyChanging();
					this._matId = value;
					this.SendPropertyChanged("matId");
					this.OnmatIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_supId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int supId
		{
			get
			{
				return this._supId;
			}
			set
			{
				if ((this._supId != value))
				{
					if (this._Supplier.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsupIdChanging(value);
					this.SendPropertyChanging();
					this._supId = value;
					this.SendPropertyChanged("supId");
					this.OnsupIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_amount", DbType="Int NOT NULL")]
		public int amount
		{
			get
			{
				return this._amount;
			}
			set
			{
				if ((this._amount != value))
				{
					this.OnamountChanging(value);
					this.SendPropertyChanging();
					this._amount = value;
					this.SendPropertyChanged("amount");
					this.OnamountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_expectAmount", DbType="Int NOT NULL")]
		public int expectAmount
		{
			get
			{
				return this._expectAmount;
			}
			set
			{
				if ((this._expectAmount != value))
				{
					this.OnexpectAmountChanging(value);
					this.SendPropertyChanging();
					this._expectAmount = value;
					this.SendPropertyChanged("expectAmount");
					this.OnexpectAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Material_UnfinishedRecord", Storage="_Material", ThisKey="matId", OtherKey="id", IsForeignKey=true)]
		public Material Material
		{
			get
			{
				return this._Material.Entity;
			}
			set
			{
				Material previousValue = this._Material.Entity;
				if (((previousValue != value) 
							|| (this._Material.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Material.Entity = null;
						previousValue.UnfinishedRecord.Remove(this);
					}
					this._Material.Entity = value;
					if ((value != null))
					{
						value.UnfinishedRecord.Add(this);
						this._matId = value.id;
					}
					else
					{
						this._matId = default(int);
					}
					this.SendPropertyChanged("Material");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_UnfinishedRecord", Storage="_Order", ThisKey="orderId", OtherKey="id", IsForeignKey=true)]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.UnfinishedRecord.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.UnfinishedRecord.Add(this);
						this._orderId = value.id;
					}
					else
					{
						this._orderId = default(string);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Supplier_UnfinishedRecord", Storage="_Supplier", ThisKey="supId", OtherKey="id", IsForeignKey=true)]
		public Supplier Supplier
		{
			get
			{
				return this._Supplier.Entity;
			}
			set
			{
				Supplier previousValue = this._Supplier.Entity;
				if (((previousValue != value) 
							|| (this._Supplier.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Supplier.Entity = null;
						previousValue.UnfinishedRecord.Remove(this);
					}
					this._Supplier.Entity = value;
					if ((value != null))
					{
						value.UnfinishedRecord.Add(this);
						this._supId = value.id;
					}
					else
					{
						this._supId = default(int);
					}
					this.SendPropertyChanged("Supplier");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
